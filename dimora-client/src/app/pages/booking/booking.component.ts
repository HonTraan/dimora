import { Component, OnInit, OnDestroy } from '@angular/core';
import { MaterialModule } from '../../shared/material.module';
import { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';
import { BookingState } from '../../ngrx/state/booking.state';
import { Store } from '@ngrx/store';
import { AuthState } from '../../ngrx/state/auth.state';
import { RoomState } from '../../ngrx/state/room.state';
import { BookingModel } from '../../models/booking.model';
import { ActivatedRoute } from '@angular/router';
import { NgIf } from '@angular/common';
import { Observable, Subscription } from 'rxjs';
import { AuthModel } from '../../models/auth.model';

@Component({
  selector: 'app-booking',
  standalone: true,
  imports: [MaterialModule, ReactiveFormsModule, NgIf],
  templateUrl: './booking.component.html',
  styleUrl: './booking.component.scss'
})
export class BookingComponent implements OnInit, OnDestroy {
  
  bookingForm!: FormGroup;
  
  // Booking data from route params or state
  roomId: string = '';
  checkInDate: string = '';
  checkOutDate: string = '';
  guestCount: number = 0;
  totalAmount: number = 0;

  subscription: Subscription[] = [];
  mineProfile$ !: Observable<AuthModel>;
  isLoading$ !: Observable<boolean>;
  idToken$ !: Observable<string>;
  mineProfile: AuthModel = <AuthModel>{};
  idToken: string = '';

  constructor(
    private store: Store<{auth: AuthState, room: RoomState, booking: BookingState}>,
    private route: ActivatedRoute,
  ) {
    this.initForm();
    this.mineProfile$ = this.store.select('auth', 'mineProfile');
    this.isLoading$ = this.store.select('auth', 'isLoading');
    this.idToken$ = this.store.select('auth', 'idToken');
  }

  ngOnInit(): void {
    this.loadBookingData();
    this.subscription.push(
      this.mineProfile$.subscribe(profile => {
        if(profile.id){
          this.mineProfile = profile;
        }
      }),
      this.idToken$.subscribe(token => {
        if(token){
          this.idToken = token;
        }
      }),
   
    );
  }

  ngOnDestroy(): void {
  }

  private initForm(): void {
    this.bookingForm = new FormGroup({
      fullName: new FormControl('', [Validators.required]),
      email: new FormControl('', [Validators.required, Validators.email]),
      phoneNumber: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]{10}$/)])
    });

    // Debug form state
    this.bookingForm.valueChanges.subscribe(value => {
      console.log('Form value:', value);
      console.log('Form valid:', this.bookingForm.valid);
      console.log('Form errors:', this.bookingForm.errors);
      console.log('Full name errors:', this.bookingForm.get('fullName')?.errors);
      console.log('Email errors:', this.bookingForm.get('email')?.errors);
      console.log('Phone errors:', this.bookingForm.get('phoneNumber')?.errors);
    });
  }

  private loadBookingData(): void {
    // Load data from route params or store
    this.route.queryParams.subscribe(params => {
      this.roomId = params['roomId'] || '';
      this.checkInDate = params['checkIn'] || '';
      this.checkOutDate = params['checkOut'] || '';
      this.guestCount = Number(params['guests']) || 0;
      this.totalAmount = Number(params['totalAmount']) || 0;
    });
  }

  onSubmit(): void {
    if (this.bookingForm.valid) {
      const formValue = this.bookingForm.value;
      
      // Create guest notes from form values
      const guestNotes = `Full Name: ${formValue.fullName}, Email: ${formValue.email}, Phone: ${formValue.phoneNumber}`;
      
      // Create booking model
      const bookingData: BookingModel = {
        id: '', // Will be generated by backend
        room_id: this.roomId,
        user_id: this.mineProfile.id, // Get from auth state
        host_id: '', // Get from room data
        check_in_date: this.checkInDate,
        check_out_date: this.checkOutDate,
        guest_count: this.guestCount,
        total_amount: this.totalAmount,
        status: 'pending',
        guest_notes: guestNotes,
        host_notes: ''
      };

      console.log('Booking Data:', bookingData);
      
      // TODO: Dispatch booking action
      // this.store.dispatch(BookingActions.createBooking({ booking: bookingData }));
      
      // TODO: Navigate to payment page
      // this.router.navigate(['/payment'], { queryParams: { bookingId: bookingData.id } });
    } else {
      console.log('Form is invalid');
      this.markFormGroupTouched();
    }
  }

  private markFormGroupTouched(): void {
    Object.keys(this.bookingForm.controls).forEach(key => {
      const control = this.bookingForm.get(key);
      control?.markAsTouched();
    });
  }

  // Only allow numbers in phone input
  onPhoneKeyPress(event: KeyboardEvent): void {
    const charCode = event.which ? event.which : event.keyCode;
    
    // Allow: backspace, delete, tab, escape, enter
    if ([8, 9, 27, 13, 46].indexOf(charCode) !== -1 ||
        // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
        (charCode === 65 && event.ctrlKey === true) ||
        (charCode === 67 && event.ctrlKey === true) ||
        (charCode === 86 && event.ctrlKey === true) ||
        (charCode === 88 && event.ctrlKey === true)) {
      return;
    }
    
    // Ensure that it is a number and stop the keypress
    if ((charCode < 48 || charCode > 57)) {
      event.preventDefault();
    }
  }
}
